/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Sat Oct  1 22:01:56 2016. */

#ifndef PB_RIEMANN_PB_H_INCLUDED
#define PB_RIEMANN_PB_H_INCLUDED
#include <nanopb/pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _RiemannAttribute {
    pb_callback_t key;
    pb_callback_t value;
/* @@protoc_insertion_point(struct:RiemannAttribute) */
} RiemannAttribute;

typedef struct _RiemannQuery {
    pb_callback_t string;
/* @@protoc_insertion_point(struct:RiemannQuery) */
} RiemannQuery;

typedef struct _RiemannEvent {
    bool has_time;
    int64_t time;
    pb_callback_t state;
    pb_callback_t service;
    pb_callback_t host;
    pb_callback_t description;
    pb_callback_t tags;
    bool has_ttl;
    float ttl;
    pb_callback_t attributes;
    bool has_metric_sint64;
    int64_t metric_sint64;
    bool has_metric_d;
    double metric_d;
    bool has_metric_f;
    float metric_f;
/* @@protoc_insertion_point(struct:RiemannEvent) */
} RiemannEvent;

typedef struct _RiemannMsg {
    bool has_ok;
    bool ok;
    pb_callback_t error;
    pb_callback_t states;
    bool has_query;
    RiemannQuery query;
    pb_callback_t events;
/* @@protoc_insertion_point(struct:RiemannMsg) */
} RiemannMsg;

typedef struct _RiemannState {
    bool has_time;
    int64_t time;
    pb_callback_t state;
    pb_callback_t service;
    pb_callback_t host;
    pb_callback_t description;
    bool has_once;
    bool once;
    pb_callback_t tags;
    bool has_ttl;
    float ttl;
/* @@protoc_insertion_point(struct:RiemannState) */
} RiemannState;

/* Default values for struct fields */

/* Initializer values for message structs */
#define RiemannState_init_default                {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0}
#define RiemannEvent_init_default                {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define RiemannQuery_init_default                {{{NULL}, NULL}}
#define RiemannMsg_init_default                  {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, RiemannQuery_init_default, {{NULL}, NULL}}
#define RiemannAttribute_init_default            {{{NULL}, NULL}, {{NULL}, NULL}}
#define RiemannState_init_zero                   {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0}
#define RiemannEvent_init_zero                   {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define RiemannQuery_init_zero                   {{{NULL}, NULL}}
#define RiemannMsg_init_zero                     {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, RiemannQuery_init_zero, {{NULL}, NULL}}
#define RiemannAttribute_init_zero               {{{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define RiemannAttribute_key_tag                 1
#define RiemannAttribute_value_tag               2
#define RiemannQuery_string_tag                  1
#define RiemannEvent_time_tag                    1
#define RiemannEvent_state_tag                   2
#define RiemannEvent_service_tag                 3
#define RiemannEvent_host_tag                    4
#define RiemannEvent_description_tag             5
#define RiemannEvent_tags_tag                    7
#define RiemannEvent_ttl_tag                     8
#define RiemannEvent_attributes_tag              9
#define RiemannEvent_metric_sint64_tag           13
#define RiemannEvent_metric_d_tag                14
#define RiemannEvent_metric_f_tag                15
#define RiemannMsg_ok_tag                        2
#define RiemannMsg_error_tag                     3
#define RiemannMsg_states_tag                    4
#define RiemannMsg_query_tag                     5
#define RiemannMsg_events_tag                    6
#define RiemannState_time_tag                    1
#define RiemannState_state_tag                   2
#define RiemannState_service_tag                 3
#define RiemannState_host_tag                    4
#define RiemannState_description_tag             5
#define RiemannState_once_tag                    6
#define RiemannState_tags_tag                    7
#define RiemannState_ttl_tag                     8

/* Struct field encoding specification for nanopb */
extern const pb_field_t RiemannState_fields[9];
extern const pb_field_t RiemannEvent_fields[12];
extern const pb_field_t RiemannQuery_fields[2];
extern const pb_field_t RiemannMsg_fields[6];
extern const pb_field_t RiemannAttribute_fields[3];

/* Maximum encoded size of messages (where known) */
/* RiemannState_size depends on runtime parameters */
/* RiemannEvent_size depends on runtime parameters */
/* RiemannQuery_size depends on runtime parameters */
/* RiemannMsg_size depends on runtime parameters */
/* RiemannAttribute_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define RIEMANN_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
